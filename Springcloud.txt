问题：
1.分布式系统中集群时的数据一致性协议raft
	保证集群中的每个节点的数据同步/一致性（简单说：数据同步）
	
	raft协议算法：
		1.状态：
			跟随者、竞选者、领导者
		2.大多数：
			n > n/2 + 1
		3.任期：每次选择一个新的角色
		4.谁的票数大谁就是领导者
		注意：任何算法来源于生活
		
		选择过程：
			1.初始化都为跟随者
			2.系统随机给每个节点超时等待时间
			3.在超时时间过后，状态改为竞选者。在优先度过了超时时间的节点可优先向其他节点发送竞选请求到领导者
			
		核心原理：
			哪个节点的超时时间短，哪个大概率为领导角色
			
		情况：
			1.如果所有节点的超时随机数一样，当前投票作废，重新进入随机生成超时时间
			2.如果有多个节点生成的随机数一样，比较谁的票数多，谁就是领导
			  如果票数完全一样，直接作废，重新进入随机生成超时时间
			建议集群节点为奇数
			
		故障重新选举：
			1.如果跟随者不能及时接收领导者的通知消息，那么跟随者状态就会变为竞选者状态，发给其他节点进行竞选通知，只有
			  该竞选者超过半数以上即可选择领导者
			  
		数据一致（类似zookeeper的zap协议）：
			1.所有请求统一交予领导者角色完成，写入该对应的日志（对应zxid）并标志该状态为提交状态
			2.为了提交该日志，领导者角色就会将该日志以心跳的形式发送给其他跟随者，
			  只要满足过半的跟随者可以写入该数据，则为直接通知其他节点同步该数据（简称日志复制）
			3.超过时间之后，当前节点的状态可能由跟随者变为竞选者，会给其他节点发出选举的投票通知，只有
			  该竞选者超过半数以上即可选择领导者
				
	zookeeper基于zap协议实现保持每个节点数据同步问题，中心化思想集群模式
		中心化思想：
			根据muId/serverId（数值越大等级越大）或者根据随机时间（时间越短等级越大）配置区别哪个节点是主节点
			另一种情况：
				当开始集群的时候，已经选举了主节点的，后等级大的就只能是从节点了
			最终情况：
				当zookeeper的主节点的zxid事务id一致情况下，再去比较选择新的主节点（当主节点宕机）
				否则先比较zxid（数值越大等级越大）去选择新的主节点
		中心化思想缺陷：
			整个集群为了保证数据一致性，必须满足 n > n/2 + 1 才能实现集群环境
		数据同步：
			把每个节点请求的事务都交予主节点处理，再由主节点分发到各个从节点
2.分布式事务一致性
	核心解决在实际系统中产生的跨事务导致分布式事务问题
	核心在于最终一致性
	
	
	CAP原理
	
	
	
	
	
3.网关
	1.zuul与gateway的区别
		zuul属于netfix公司开源框架的第一代网关
		gateway属于springcloud的第二代网关
		注意：zuul底层基于servlet实现，阻塞式api，不支持长连接
			  springcloudgateway基于spring5构建，能够实现响应式非阻塞式api、
			  支持长连接、更好的支持spring体系产品、依赖springboot-webflux
	2.过滤器filte与gateway的区别
		filte支持单服务、gateway支持多服务
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Shell 教程
	Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言
		#!/bin/bash
		#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。
	例子：	
		1.打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell）
		2.运行 Shell 脚本有两种方法：
			1.作为可执行程序
				将上面的代码保存为 test.sh，并 cd 到相应目录：
					chmod +x ./test.sh  #使脚本具有执行权限
					./test.sh  #执行脚本
			2.作为解释器参数
				这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：
					/bin/sh test.sh
					/bin/php test.php

Shell 变量
	1.变量定义
		注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：
			命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
			中间不能有空格，可以使用下划线（_）。
			不能使用标点符号。
			不能使用bash里的关键字（可用help命令查看保留关键字）。							
	2.使用变量
		使用一个定义过的变量，只要在变量名前面加美元符号即可，如：
			your_name="qinjx"
			echo $your_name
			echo ${your_name}					
	3.只读变量
		使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。				
	4.删除变量
		使用 unset 命令可以删除变量。语法：
			unset variable_name
		变量被删除后不能再次使用。unset 命令不能删除只读变量。				
	5.变量类型
		运行shell时，会同时存在三种变量：
			1) 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
			2) 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
			3) shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行				
	
Shell 字符串
	1.定义
		字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号	
			1.单引号
				str='this is a string'				
			2.双引号
				your_name='runoob'
				str="Hello, I know you are \"$your_name\"! \n"
				echo -e $str					
	2.拼接字符串
		your_name="runoob"
		# 使用双引号拼接
		greeting="hello, "$your_name" !"	
	3.获取字符串长度
		string="abcd"
		echo ${#string} #输出 4		
	4.提取子字符串
		以下实例从字符串第 2 个字符开始截取 4 个字符：
			string="runoob is a great site"
			echo ${string:1:4} # 输出 unoo
		注意：第一个字符的索引值为 0。				
	5.查找子字符串
		查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：
			string="runoob is a great site"
			echo `expr index "$string" io`  # 输出 4
		注意： 以上脚本中 ` 是反引号，而不是单引号 '，不要看错了哦。			
					
Shell 数组
	bash支持一维数组（不支持多维数组），并且没有限定数组的大小。
	类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。
	1.定义数组
		在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：
		数组名=(值1 值2 ... 值n)
		例如：
			array_name=(value0 value1 value2 value3)			
	2.读取数组
		读取数组元素值的一般格式是：
			${数组名[下标]}
			例如：
				valuen=${array_name[n]}
			使用 @ 符号可以获取数组中的所有元素，例如：
				echo ${array_name[@]}				
	3.获取数组的长度
		获取数组长度的方法与获取字符串长度的方法相同，例如：
			# 取得数组元素的个数
			length=${#array_name[@]}
			# 或者
			length=${#array_name[*]}
			# 取得数组单个元素的长度
			lengthn=${#array_name[n]}				
	
Shell 注释
	1.方式一：
		以 # 开头的行就是注释，会被解释器忽略。
		通过每一行加一个 # 号设置多行注释，像这样：	
	2.方式二：
		多行注释
		多行注释还可以使用以下格式：
			:<<EOF
			注释内容...
			注释内容...
			注释内容...
			EOF
					
Shell 传递参数
	我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……
	实例
		以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）：
			#!/bin/bash
			# author:菜鸟教程
			# url:www.runoob.com
			echo "Shell 传递参数实例！";
			echo "执行的文件名：$0";
			echo "第一个参数为：$1";
			echo "第二个参数为：$2";
			echo "第三个参数为：$3";
		为脚本设置可执行权限，并执行脚本，输出结果如下所示：
			$ chmod +x test.sh 
			$ ./test.sh 1 2 3
			Shell 传递参数实例！
			执行的文件名：./test.sh
			第一个参数为：1
			第二个参数为：2
			第三个参数为：3			
					
Shell 基本运算符
	Shell 和其他编程语言一样，支持多种运算符，包括：
		算数运算符
		关系运算符
		布尔运算符
		字符串运算符
		文件测试运算符	
	1.算数运算符
		原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。
		expr 是一款表达式计算工具，使用它能完成表达式的求值操作。
		例如，两个数相加(注意使用的是反引号 ` 而不是单引号 ')：
		实例
			#!/bin/bash
			val=`expr 2 + 2`
			echo "两数之和为 : $val"
		两点注意：
			表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。
			完整的表达式要被 ` ` 包含，注意这个字符不是常用的单引号，在 Esc 键下边。			
	2.关系运算符
		关系运算符只支持数字，不支持字符串，除非字符串的值是数字。				
	3.文件测试运算符
		文件测试运算符用于检测 Unix 文件的各种属性。				
		例子：	
			[ -r $file ]
			文件是否可读
	
Shell 流程控制
	1.选择语句
		和Java、PHP等语言不一样，sh的流程控制不可为空，如(以下为PHP流程控制写法)：
			<?php
			if (isset($_GET["q"])) {
				search(q);
			}
			else {
				// 不做任何事情
			}	
		1.if 语法格式：
			if condition
			then
				command1 
				command2
				...
				commandN 
			fi
		2.if else 语法格式：
			if condition
			then
				command1 
				command2
				...
				commandN
			else
				command
			fi
		3.if else-if else 语法格式：
			if condition1
			then
				command1
			elif condition2 
			then 
				command2
			else
				commandN
			fi	
		4.case
			Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：
				case 值 in
				模式1)
					command1
					command2
					...
					commandN
					;;
				模式2）
					command1
					command2
					...
					commandN
					;;
				esac	
	2.循环语句
		1.for循环一般格式为：
			for var in item1 item2 ... itemN
			do
				command1
				command2
				...
				commandN
			done
		2.while 语句
			while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：
			while condition
			do
				command
			done			
					
		3.until 循环
			until 循环执行一系列命令直至条件为 true 时停止。
			until 循环与 while 循环在处理方式上刚好相反。
			一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。
			until 语法格式:
				until condition
				do
					command
				done
			condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。			
		4.跳出循环
			在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。
			break命令
				break命令允许跳出所有循环（终止执行后面的所有循环）			
		5.continue
			continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。			
					
Shell 函数
	linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。
	shell中函数的定义格式如下：
		[ function ] funname [()]

		{

			action;

			[return int;]

		}
	说明：
		1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。
		2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255
					
Shell 输入/输出重定向
	大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。				
	重定向命令列表如下：
		命令				说明
		command > file	将输出重定向到 file。
		command < file	将输入重定向到 file。
		command >> file	将输出以追加的方式重定向到 file。
		n > file		将文件描述符为 n 的文件重定向到 file。
		n >> file		将文件描述符为 n 的文件以追加的方式重定向到 file。
		n >& m			将输出文件 m 和 n 合并。
		n <& m			将输入文件 m 和 n 合并。
		<< tag			将开始标记 tag 和结束标记 tag 之间的内容作为输入。				
	1.输出重定向
		重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:
		command1 > file1
		上面这个命令执行command1然后将输出的内容存入file1。
		注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用>>操作符。
		实例
			执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):
			$ who > users				
	2.输入重定向
		和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：
			command1 < file1
		这样，本来需要从键盘获取输入的命令会转移到文件读取内容。
		注意：输出重定向是大于号(>)，输入重定向是小于号(<)。

		实例
			接着以上实例，我们需要统计 users 文件的行数,执行以下命令：
				$ wc -l users
					   2 users
			也可以将输入重定向到 users 文件：
				$  wc -l < users
					   2 
			注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。
		command1 < infile > outfile				
		同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。			
	3.重定向深入讲解
		一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：
			标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。
			标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。
			标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。				
		1.如果希望 stderr 重定向到 file，可以这样写：
			$ command 2 > file
		2.如果希望 stderr 追加到 file 文件末尾，可以这样写：
			$ command 2 >> file			
	4.Here Document
		Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。
		它的基本的形式如下：
			command << delimiter
				document
			delimiter
		它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。
		注意：
			结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。
			开始的delimiter前后的空格会被忽略掉。				
	5./dev/null 文件
		如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：
			$ command > /dev/null
		/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到"禁止输出"的效果。
		如果希望屏蔽 stdout 和 stderr，可以这样写：
			$ command > /dev/null 2>&1
			注意：
				0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。
				这里的 2 和 > 之间不可以有空格，2> 是一体的时候才表示错误输出。				
					
Shell 文件包含
	和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。
	Shell 文件包含的语法格式如下：
		. filename   # 注意点号(.)和文件名中间有一空格
		或
		source filename					
	例子：	
		. ./test1.sh（引用sh文件）
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					